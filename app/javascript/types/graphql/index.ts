import gql from 'graphql-tag'
import * as VueApolloComposable from '@vue/apollo-composable'
import * as VueCompositionApi from '@vue/composition-api'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = {
  [_ in K]?: never
}
export type Incremental<T> =
  | T
  | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never }
export type ReactiveFunction<TParam> = () => TParam
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  /** An ISO 8601-encoded date */
  ISO8601Date: { input: any; output: any }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any }
}

/** Autogenerated input type of ChangePassword */
export type ChangePasswordInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>
  /** User password */
  userPassword: UserPasswordInput
}

/** Autogenerated return type of ChangePassword. */
export type ChangePasswordPayload = {
  __typename?: 'ChangePasswordPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>
  /** Success */
  success: Scalars['Boolean']['output']
}

/** Chat type */
export type Chat = {
  __typename?: 'Chat'
  /** Admins */
  admins: Array<User>
  /** Chat messages */
  chatMessages: Array<ChatMessage>
  /** Created at */
  createdAt: Scalars['ISO8601DateTime']['output']
  /** Description */
  description?: Maybe<Scalars['String']['output']>
  /** ID */
  id: Scalars['ID']['output']
  /** Owner */
  owner: User
  /** Title */
  title: Scalars['String']['output']
  /** Updated at */
  updatedAt: Scalars['ISO8601DateTime']['output']
  /** Users */
  users: Array<User>
}

/** Chat message type */
export type ChatMessage = {
  __typename?: 'ChatMessage'
  /** Chat ID */
  chatId: Scalars['String']['output']
  /** Content */
  content?: Maybe<Scalars['String']['output']>
  /** Created at */
  createdAt: Scalars['ISO8601DateTime']['output']
  /** ID */
  id: Scalars['ID']['output']
  /** Message histories */
  messageHistories: Array<MessageHistory>
  /** Updated at */
  updatedAt: Scalars['ISO8601DateTime']['output']
  /** User */
  user: User
  /** User ID */
  userId: Scalars['String']['output']
}

/** JWT type */
export type Jwt = {
  __typename?: 'Jwt'
  /** Token */
  token?: Maybe<Scalars['String']['output']>
}

/** Autogenerated input type of Login */
export type LoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>
  /** User details */
  userDetails: UserInput
}

/** Autogenerated return type of Login. */
export type LoginPayload = {
  __typename?: 'LoginPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>
  /** JWT */
  jwt: Jwt
}

/** Message history */
export type MessageHistory = {
  __typename?: 'MessageHistory'
  /** Chat message ID */
  chatMessageId: Scalars['String']['output']
  /** Content */
  content?: Maybe<Scalars['String']['output']>
  /** Created at */
  createdAt: Scalars['ISO8601DateTime']['output']
  /** ID */
  id: Scalars['ID']['output']
  /** Updated at */
  updatedAt: Scalars['ISO8601DateTime']['output']
}

/** Mutation root of the system */
export type Mutation = {
  __typename?: 'Mutation'
  /** Change password */
  changePassword?: Maybe<ChangePasswordPayload>
  /** Login */
  login?: Maybe<LoginPayload>
  /** Register */
  register?: Maybe<RegisterPayload>
  /** Update user data */
  updateUserData?: Maybe<UpdateUserDataPayload>
}

/** Mutation root of the system */
export type MutationChangePasswordArgs = {
  input: ChangePasswordInput
}

/** Mutation root of the system */
export type MutationLoginArgs = {
  input: LoginInput
}

/** Mutation root of the system */
export type MutationRegisterArgs = {
  input: RegisterInput
}

/** Mutation root of the system */
export type MutationUpdateUserDataArgs = {
  input: UpdateUserDataInput
}

/** Query root of the system */
export type Query = {
  __typename?: 'Query'
  /** Returns logged in user */
  me: User
}

/** Autogenerated input type of Register */
export type RegisterInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>
  /** User details */
  userDetails: UserInput
}

/** Autogenerated return type of Register. */
export type RegisterPayload = {
  __typename?: 'RegisterPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>
  /** JWT */
  jwt: Jwt
}

/** Autogenerated input type of UpdateUserData */
export type UpdateUserDataInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>
  /** User details */
  userDetails: UserInput
}

/** Autogenerated return type of UpdateUserData. */
export type UpdateUserDataPayload = {
  __typename?: 'UpdateUserDataPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>
  /** User */
  user: User
}

/** User */
export type User = {
  __typename?: 'User'
  /** Blocked users */
  blockedUsers: Array<User>
  /** Chats */
  chats: Array<Chat>
  /** Created at */
  createdAt: Scalars['ISO8601DateTime']['output']
  /** Date of birth */
  dateOfBirth?: Maybe<Scalars['ISO8601DateTime']['output']>
  /** Email */
  email: Scalars['String']['output']
  /** First name */
  firstName?: Maybe<Scalars['String']['output']>
  /** Full name */
  fullName?: Maybe<Scalars['String']['output']>
  /** ID */
  id: Scalars['ID']['output']
  /** Last name */
  lastName?: Maybe<Scalars['String']['output']>
  /** Role */
  role: UserRole
  /** Updated at */
  updatedAt: Scalars['ISO8601DateTime']['output']
  /** User setting */
  userSetting: UserSetting
}

/** User input */
export type UserInput = {
  /** Date of birth */
  dateOfBirth?: InputMaybe<Scalars['ISO8601Date']['input']>
  /** Email */
  email?: InputMaybe<Scalars['String']['input']>
  /** First name */
  firstName?: InputMaybe<Scalars['String']['input']>
  /** Last name */
  lastName?: InputMaybe<Scalars['String']['input']>
  /** Password */
  password?: InputMaybe<Scalars['String']['input']>
  /** Password confirmation */
  passwordConfirmation?: InputMaybe<Scalars['String']['input']>
}

/** User password input type */
export type UserPasswordInput = {
  /** New password */
  newPassword: Scalars['String']['input']
  /** New password confirmation */
  newPasswordConfirmation: Scalars['String']['input']
  /** Old password */
  oldPassword: Scalars['String']['input']
}

/** User role enum */
export enum UserRole {
  Admin = 'admin',
  Moderator = 'moderator',
  Superadmin = 'superadmin',
  User = 'user'
}

/** User setting */
export type UserSetting = {
  __typename?: 'UserSetting'
  /** Created at */
  createdAt: Scalars['ISO8601DateTime']['output']
  /** Date of birth */
  dateOfBirth?: Maybe<Scalars['ISO8601Date']['output']>
  /** First name */
  firstName?: Maybe<Scalars['String']['output']>
  /** ID */
  id: Scalars['ID']['output']
  /** Last name */
  lastName?: Maybe<Scalars['String']['output']>
  /** Updated at */
  updatedAt: Scalars['ISO8601DateTime']['output']
  /** User ID */
  userId: Scalars['String']['output']
}

export type ChangePasswordMutationVariables = Exact<{
  newPassword: Scalars['String']['input']
  oldPassword: Scalars['String']['input']
  newPasswordConfirmation: Scalars['String']['input']
}>

export type ChangePasswordMutation = {
  __typename?: 'Mutation'
  changePassword?: { __typename?: 'ChangePasswordPayload'; success: boolean } | null
}

export type GetCurrentUserQueryVariables = Exact<{ [key: string]: never }>

export type GetCurrentUserQuery = {
  __typename?: 'Query'
  me: {
    __typename?: 'User'
    email: string
    id: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    userSetting: {
      __typename?: 'UserSetting'
      firstName?: string | null
      lastName?: string | null
      dateOfBirth?: any | null
    }
    chats: Array<{
      __typename?: 'Chat'
      id: string
      title: string
      description?: string | null
      users: Array<{ __typename?: 'User'; id: string; fullName?: string | null }>
      chatMessages: Array<{
        __typename?: 'ChatMessage'
        id: string
        content?: string | null
        createdAt: any
        user: { __typename?: 'User'; id: string; fullName?: string | null }
      }>
    }>
    blockedUsers: Array<{
      __typename?: 'User'
      id: string
      userSetting: { __typename?: 'UserSetting'; firstName?: string | null }
    }>
  }
}

export type LoginMutationVariables = Exact<{
  email: Scalars['String']['input']
  password: Scalars['String']['input']
}>

export type LoginMutation = {
  __typename?: 'Mutation'
  login?: { __typename?: 'LoginPayload'; jwt: { __typename?: 'Jwt'; token?: string | null } } | null
}

export type RegisterMutationVariables = Exact<{
  email: Scalars['String']['input']
  password: Scalars['String']['input']
  passwordConfirmation: Scalars['String']['input']
}>

export type RegisterMutation = {
  __typename?: 'Mutation'
  register?: {
    __typename?: 'RegisterPayload'
    jwt: { __typename?: 'Jwt'; token?: string | null }
  } | null
}

export const ChangePasswordDocument = gql`
  mutation ChangePassword(
    $newPassword: String!
    $oldPassword: String!
    $newPasswordConfirmation: String!
  ) {
    changePassword(
      input: {
        userPassword: {
          newPassword: $newPassword
          oldPassword: $oldPassword
          newPasswordConfirmation: $newPasswordConfirmation
        }
      }
    ) {
      success
    }
  }
`

/**
 * __useChangePasswordMutation__
 *
 * To run a mutation, you first call `useChangePasswordMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useChangePasswordMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useChangePasswordMutation({
 *   variables: {
 *     newPassword: // value for 'newPassword'
 *     oldPassword: // value for 'oldPassword'
 *     newPasswordConfirmation: // value for 'newPasswordConfirmation'
 *   },
 * });
 */
export function useChangePasswordMutation(
  options:
    | VueApolloComposable.UseMutationOptions<
        ChangePasswordMutation,
        ChangePasswordMutationVariables
      >
    | ReactiveFunction<
        VueApolloComposable.UseMutationOptions<
          ChangePasswordMutation,
          ChangePasswordMutationVariables
        >
      > = {}
) {
  return VueApolloComposable.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(
    ChangePasswordDocument,
    options
  )
}
export type ChangePasswordMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<
  ChangePasswordMutation,
  ChangePasswordMutationVariables
>
export const GetCurrentUserDocument = gql`
  query GetCurrentUser {
    me {
      email
      id
      userSetting {
        firstName
        lastName
        dateOfBirth
      }
      chats {
        id
        title
        description
        users {
          id
          fullName
        }
        chatMessages {
          id
          content
          createdAt
          user {
            id
            fullName
          }
        }
      }
      firstName
      lastName
      fullName
      blockedUsers {
        id
        userSetting {
          firstName
        }
      }
    }
  }
`

/**
 * __useGetCurrentUserQuery__
 *
 * To run a query within a Vue component, call `useGetCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentUserQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useGetCurrentUserQuery();
 */
export function useGetCurrentUserQuery(
  options:
    | VueApolloComposable.UseQueryOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>
    | VueCompositionApi.Ref<
        VueApolloComposable.UseQueryOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>
      >
    | ReactiveFunction<
        VueApolloComposable.UseQueryOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>
      > = {}
) {
  return VueApolloComposable.useQuery<GetCurrentUserQuery, GetCurrentUserQueryVariables>(
    GetCurrentUserDocument,
    {},
    options
  )
}
export function useGetCurrentUserLazyQuery(
  options:
    | VueApolloComposable.UseQueryOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>
    | VueCompositionApi.Ref<
        VueApolloComposable.UseQueryOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>
      >
    | ReactiveFunction<
        VueApolloComposable.UseQueryOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>
      > = {}
) {
  return VueApolloComposable.useLazyQuery<GetCurrentUserQuery, GetCurrentUserQueryVariables>(
    GetCurrentUserDocument,
    {},
    options
  )
}
export type GetCurrentUserQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<
  GetCurrentUserQuery,
  GetCurrentUserQueryVariables
>
export const LoginDocument = gql`
  mutation Login($email: String!, $password: String!) {
    login(input: { userDetails: { email: $email, password: $password } }) {
      jwt {
        token
      }
    }
  }
`

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useLoginMutation({
 *   variables: {
 *     email: // value for 'email'
 *     password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(
  options:
    | VueApolloComposable.UseMutationOptions<LoginMutation, LoginMutationVariables>
    | ReactiveFunction<
        VueApolloComposable.UseMutationOptions<LoginMutation, LoginMutationVariables>
      > = {}
) {
  return VueApolloComposable.useMutation<LoginMutation, LoginMutationVariables>(
    LoginDocument,
    options
  )
}
export type LoginMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<
  LoginMutation,
  LoginMutationVariables
>
export const RegisterDocument = gql`
  mutation Register($email: String!, $password: String!, $passwordConfirmation: String!) {
    register(
      input: {
        userDetails: {
          email: $email
          password: $password
          passwordConfirmation: $passwordConfirmation
        }
      }
    ) {
      jwt {
        token
      }
    }
  }
`

/**
 * __useRegisterMutation__
 *
 * To run a mutation, you first call `useRegisterMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useRegisterMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useRegisterMutation({
 *   variables: {
 *     email: // value for 'email'
 *     password: // value for 'password'
 *     passwordConfirmation: // value for 'passwordConfirmation'
 *   },
 * });
 */
export function useRegisterMutation(
  options:
    | VueApolloComposable.UseMutationOptions<RegisterMutation, RegisterMutationVariables>
    | ReactiveFunction<
        VueApolloComposable.UseMutationOptions<RegisterMutation, RegisterMutationVariables>
      > = {}
) {
  return VueApolloComposable.useMutation<RegisterMutation, RegisterMutationVariables>(
    RegisterDocument,
    options
  )
}
export type RegisterMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<
  RegisterMutation,
  RegisterMutationVariables
>
